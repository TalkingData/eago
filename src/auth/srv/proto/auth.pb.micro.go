// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/auth.proto

package auth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthService service

func NewAuthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthService service

type AuthService interface {
	// Token
	VerifyToken(ctx context.Context, in *Token, opts ...client.CallOption) (*BoolMsg, error)
	GetTokenContent(ctx context.Context, in *Token, opts ...client.CallOption) (*TokenContent, error)
	// User
	ListUsers(ctx context.Context, in *QueryWithPage, opts ...client.CallOption) (*PagedUsers, error)
	GetUserDepartment(ctx context.Context, in *IdQuery, opts ...client.CallOption) (*Department, error)
	ListUserDepartmentUsers(ctx context.Context, in *IdQuery, opts ...client.CallOption) (*MemberUsers, error)
	// Product
	ListProducts(ctx context.Context, in *QueryWithPage, opts ...client.CallOption) (*PagedProducts, error)
	ListProductUsers(ctx context.Context, in *IdQuery, opts ...client.CallOption) (*MemberUsers, error)
	// Department
	ListDepartmentUsers(ctx context.Context, in *IdQuery, opts ...client.CallOption) (*MemberUsers, error)
	ListParentDepartmentUsers(ctx context.Context, in *IdQuery, opts ...client.CallOption) (*MemberUsers, error)
	// Group
	ListGroups(ctx context.Context, in *QueryWithPage, opts ...client.CallOption) (*PagedGroups, error)
	ListGroupUsers(ctx context.Context, in *IdQuery, opts ...client.CallOption) (*MemberUsers, error)
	// Role
	ListRoleUsers(ctx context.Context, in *NameQuery, opts ...client.CallOption) (*RoleMemberUsers, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) VerifyToken(ctx context.Context, in *Token, opts ...client.CallOption) (*BoolMsg, error) {
	req := c.c.NewRequest(c.name, "AuthService.VerifyToken", in)
	out := new(BoolMsg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) GetTokenContent(ctx context.Context, in *Token, opts ...client.CallOption) (*TokenContent, error) {
	req := c.c.NewRequest(c.name, "AuthService.GetTokenContent", in)
	out := new(TokenContent)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListUsers(ctx context.Context, in *QueryWithPage, opts ...client.CallOption) (*PagedUsers, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListUsers", in)
	out := new(PagedUsers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) GetUserDepartment(ctx context.Context, in *IdQuery, opts ...client.CallOption) (*Department, error) {
	req := c.c.NewRequest(c.name, "AuthService.GetUserDepartment", in)
	out := new(Department)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListUserDepartmentUsers(ctx context.Context, in *IdQuery, opts ...client.CallOption) (*MemberUsers, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListUserDepartmentUsers", in)
	out := new(MemberUsers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListProducts(ctx context.Context, in *QueryWithPage, opts ...client.CallOption) (*PagedProducts, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListProducts", in)
	out := new(PagedProducts)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListProductUsers(ctx context.Context, in *IdQuery, opts ...client.CallOption) (*MemberUsers, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListProductUsers", in)
	out := new(MemberUsers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListDepartmentUsers(ctx context.Context, in *IdQuery, opts ...client.CallOption) (*MemberUsers, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListDepartmentUsers", in)
	out := new(MemberUsers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListParentDepartmentUsers(ctx context.Context, in *IdQuery, opts ...client.CallOption) (*MemberUsers, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListParentDepartmentUsers", in)
	out := new(MemberUsers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListGroups(ctx context.Context, in *QueryWithPage, opts ...client.CallOption) (*PagedGroups, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListGroups", in)
	out := new(PagedGroups)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListGroupUsers(ctx context.Context, in *IdQuery, opts ...client.CallOption) (*MemberUsers, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListGroupUsers", in)
	out := new(MemberUsers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListRoleUsers(ctx context.Context, in *NameQuery, opts ...client.CallOption) (*RoleMemberUsers, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListRoleUsers", in)
	out := new(RoleMemberUsers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	// Token
	VerifyToken(context.Context, *Token, *BoolMsg) error
	GetTokenContent(context.Context, *Token, *TokenContent) error
	// User
	ListUsers(context.Context, *QueryWithPage, *PagedUsers) error
	GetUserDepartment(context.Context, *IdQuery, *Department) error
	ListUserDepartmentUsers(context.Context, *IdQuery, *MemberUsers) error
	// Product
	ListProducts(context.Context, *QueryWithPage, *PagedProducts) error
	ListProductUsers(context.Context, *IdQuery, *MemberUsers) error
	// Department
	ListDepartmentUsers(context.Context, *IdQuery, *MemberUsers) error
	ListParentDepartmentUsers(context.Context, *IdQuery, *MemberUsers) error
	// Group
	ListGroups(context.Context, *QueryWithPage, *PagedGroups) error
	ListGroupUsers(context.Context, *IdQuery, *MemberUsers) error
	// Role
	ListRoleUsers(context.Context, *NameQuery, *RoleMemberUsers) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		VerifyToken(ctx context.Context, in *Token, out *BoolMsg) error
		GetTokenContent(ctx context.Context, in *Token, out *TokenContent) error
		ListUsers(ctx context.Context, in *QueryWithPage, out *PagedUsers) error
		GetUserDepartment(ctx context.Context, in *IdQuery, out *Department) error
		ListUserDepartmentUsers(ctx context.Context, in *IdQuery, out *MemberUsers) error
		ListProducts(ctx context.Context, in *QueryWithPage, out *PagedProducts) error
		ListProductUsers(ctx context.Context, in *IdQuery, out *MemberUsers) error
		ListDepartmentUsers(ctx context.Context, in *IdQuery, out *MemberUsers) error
		ListParentDepartmentUsers(ctx context.Context, in *IdQuery, out *MemberUsers) error
		ListGroups(ctx context.Context, in *QueryWithPage, out *PagedGroups) error
		ListGroupUsers(ctx context.Context, in *IdQuery, out *MemberUsers) error
		ListRoleUsers(ctx context.Context, in *NameQuery, out *RoleMemberUsers) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) VerifyToken(ctx context.Context, in *Token, out *BoolMsg) error {
	return h.AuthServiceHandler.VerifyToken(ctx, in, out)
}

func (h *authServiceHandler) GetTokenContent(ctx context.Context, in *Token, out *TokenContent) error {
	return h.AuthServiceHandler.GetTokenContent(ctx, in, out)
}

func (h *authServiceHandler) ListUsers(ctx context.Context, in *QueryWithPage, out *PagedUsers) error {
	return h.AuthServiceHandler.ListUsers(ctx, in, out)
}

func (h *authServiceHandler) GetUserDepartment(ctx context.Context, in *IdQuery, out *Department) error {
	return h.AuthServiceHandler.GetUserDepartment(ctx, in, out)
}

func (h *authServiceHandler) ListUserDepartmentUsers(ctx context.Context, in *IdQuery, out *MemberUsers) error {
	return h.AuthServiceHandler.ListUserDepartmentUsers(ctx, in, out)
}

func (h *authServiceHandler) ListProducts(ctx context.Context, in *QueryWithPage, out *PagedProducts) error {
	return h.AuthServiceHandler.ListProducts(ctx, in, out)
}

func (h *authServiceHandler) ListProductUsers(ctx context.Context, in *IdQuery, out *MemberUsers) error {
	return h.AuthServiceHandler.ListProductUsers(ctx, in, out)
}

func (h *authServiceHandler) ListDepartmentUsers(ctx context.Context, in *IdQuery, out *MemberUsers) error {
	return h.AuthServiceHandler.ListDepartmentUsers(ctx, in, out)
}

func (h *authServiceHandler) ListParentDepartmentUsers(ctx context.Context, in *IdQuery, out *MemberUsers) error {
	return h.AuthServiceHandler.ListParentDepartmentUsers(ctx, in, out)
}

func (h *authServiceHandler) ListGroups(ctx context.Context, in *QueryWithPage, out *PagedGroups) error {
	return h.AuthServiceHandler.ListGroups(ctx, in, out)
}

func (h *authServiceHandler) ListGroupUsers(ctx context.Context, in *IdQuery, out *MemberUsers) error {
	return h.AuthServiceHandler.ListGroupUsers(ctx, in, out)
}

func (h *authServiceHandler) ListRoleUsers(ctx context.Context, in *NameQuery, out *RoleMemberUsers) error {
	return h.AuthServiceHandler.ListRoleUsers(ctx, in, out)
}
