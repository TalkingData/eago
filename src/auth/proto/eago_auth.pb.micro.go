// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: eago_auth.proto

package authpb

import (
	proto1 "eago/common/proto"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthService service

func NewAuthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthService service

type AuthService interface {
	// VerifyToken 验证Token
	VerifyToken(ctx context.Context, in *Token, opts ...client.CallOption) (*emptypb.Empty, error)
	// GetTokenContent 获取Token内容
	GetTokenContent(ctx context.Context, in *Token, opts ...client.CallOption) (*TokenContent, error)
	// GetDepartmentById 根据ID查询单个部门
	GetDepartmentById(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*Department, error)
	// ListDepartmentsUsers 列出指定部门中用户
	ListDepartmentsUsers(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*MemberUsers, error)
	// ListParentDepartmentUsers 列出指定部门的父部门中用户
	ListParentDepartmentUsers(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*MemberUsers, error)
	// GetGroupById 根据ID查询单个组
	GetGroupById(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*Group, error)
	// PagedListGroups 分页查询组
	PagedListGroups(ctx context.Context, in *proto1.QueryWithPage, opts ...client.CallOption) (*PagedGroups, error)
	// ListGroupsUsers 列出指定组中用户
	ListGroupsUsers(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*MemberUsers, error)
	// GetProductById 根据ID查询单个产品线
	GetProductById(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*Product, error)
	// PagedListProducts 分页查询产品线
	PagedListProducts(ctx context.Context, in *proto1.QueryWithPage, opts ...client.CallOption) (*PagedProducts, error)
	// ListProductsUsers 列出指定产品线中用户
	ListProductsUsers(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*MemberUsers, error)
	// ListRolesUsers 列出指定角色中用户
	ListRolesUsers(ctx context.Context, in *proto1.NameQuery, opts ...client.CallOption) (*RolesMemberUsers, error)
	// GetUserById 根据ID查询单个用户
	GetUserById(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*User, error)
	// PagedListUsers 分页查询用户
	PagedListUsers(ctx context.Context, in *proto1.QueryWithPage, opts ...client.CallOption) (*PagedUsers, error)
	// GetUsersDepartment 获得指定用户的部门
	GetUsersDepartment(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*UsersDepartment, error)
	// ListUsersSameDepartmentUsers 列出与指定用户相同部门的所有用户
	ListUsersSameDepartmentUsers(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*MemberUsers, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) VerifyToken(ctx context.Context, in *Token, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "AuthService.VerifyToken", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) GetTokenContent(ctx context.Context, in *Token, opts ...client.CallOption) (*TokenContent, error) {
	req := c.c.NewRequest(c.name, "AuthService.GetTokenContent", in)
	out := new(TokenContent)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) GetDepartmentById(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*Department, error) {
	req := c.c.NewRequest(c.name, "AuthService.GetDepartmentById", in)
	out := new(Department)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListDepartmentsUsers(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*MemberUsers, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListDepartmentsUsers", in)
	out := new(MemberUsers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListParentDepartmentUsers(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*MemberUsers, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListParentDepartmentUsers", in)
	out := new(MemberUsers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) GetGroupById(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*Group, error) {
	req := c.c.NewRequest(c.name, "AuthService.GetGroupById", in)
	out := new(Group)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) PagedListGroups(ctx context.Context, in *proto1.QueryWithPage, opts ...client.CallOption) (*PagedGroups, error) {
	req := c.c.NewRequest(c.name, "AuthService.PagedListGroups", in)
	out := new(PagedGroups)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListGroupsUsers(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*MemberUsers, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListGroupsUsers", in)
	out := new(MemberUsers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) GetProductById(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*Product, error) {
	req := c.c.NewRequest(c.name, "AuthService.GetProductById", in)
	out := new(Product)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) PagedListProducts(ctx context.Context, in *proto1.QueryWithPage, opts ...client.CallOption) (*PagedProducts, error) {
	req := c.c.NewRequest(c.name, "AuthService.PagedListProducts", in)
	out := new(PagedProducts)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListProductsUsers(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*MemberUsers, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListProductsUsers", in)
	out := new(MemberUsers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListRolesUsers(ctx context.Context, in *proto1.NameQuery, opts ...client.CallOption) (*RolesMemberUsers, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListRolesUsers", in)
	out := new(RolesMemberUsers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) GetUserById(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "AuthService.GetUserById", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) PagedListUsers(ctx context.Context, in *proto1.QueryWithPage, opts ...client.CallOption) (*PagedUsers, error) {
	req := c.c.NewRequest(c.name, "AuthService.PagedListUsers", in)
	out := new(PagedUsers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) GetUsersDepartment(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*UsersDepartment, error) {
	req := c.c.NewRequest(c.name, "AuthService.GetUsersDepartment", in)
	out := new(UsersDepartment)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListUsersSameDepartmentUsers(ctx context.Context, in *proto1.IdQuery, opts ...client.CallOption) (*MemberUsers, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListUsersSameDepartmentUsers", in)
	out := new(MemberUsers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	// VerifyToken 验证Token
	VerifyToken(context.Context, *Token, *emptypb.Empty) error
	// GetTokenContent 获取Token内容
	GetTokenContent(context.Context, *Token, *TokenContent) error
	// GetDepartmentById 根据ID查询单个部门
	GetDepartmentById(context.Context, *proto1.IdQuery, *Department) error
	// ListDepartmentsUsers 列出指定部门中用户
	ListDepartmentsUsers(context.Context, *proto1.IdQuery, *MemberUsers) error
	// ListParentDepartmentUsers 列出指定部门的父部门中用户
	ListParentDepartmentUsers(context.Context, *proto1.IdQuery, *MemberUsers) error
	// GetGroupById 根据ID查询单个组
	GetGroupById(context.Context, *proto1.IdQuery, *Group) error
	// PagedListGroups 分页查询组
	PagedListGroups(context.Context, *proto1.QueryWithPage, *PagedGroups) error
	// ListGroupsUsers 列出指定组中用户
	ListGroupsUsers(context.Context, *proto1.IdQuery, *MemberUsers) error
	// GetProductById 根据ID查询单个产品线
	GetProductById(context.Context, *proto1.IdQuery, *Product) error
	// PagedListProducts 分页查询产品线
	PagedListProducts(context.Context, *proto1.QueryWithPage, *PagedProducts) error
	// ListProductsUsers 列出指定产品线中用户
	ListProductsUsers(context.Context, *proto1.IdQuery, *MemberUsers) error
	// ListRolesUsers 列出指定角色中用户
	ListRolesUsers(context.Context, *proto1.NameQuery, *RolesMemberUsers) error
	// GetUserById 根据ID查询单个用户
	GetUserById(context.Context, *proto1.IdQuery, *User) error
	// PagedListUsers 分页查询用户
	PagedListUsers(context.Context, *proto1.QueryWithPage, *PagedUsers) error
	// GetUsersDepartment 获得指定用户的部门
	GetUsersDepartment(context.Context, *proto1.IdQuery, *UsersDepartment) error
	// ListUsersSameDepartmentUsers 列出与指定用户相同部门的所有用户
	ListUsersSameDepartmentUsers(context.Context, *proto1.IdQuery, *MemberUsers) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		VerifyToken(ctx context.Context, in *Token, out *emptypb.Empty) error
		GetTokenContent(ctx context.Context, in *Token, out *TokenContent) error
		GetDepartmentById(ctx context.Context, in *proto1.IdQuery, out *Department) error
		ListDepartmentsUsers(ctx context.Context, in *proto1.IdQuery, out *MemberUsers) error
		ListParentDepartmentUsers(ctx context.Context, in *proto1.IdQuery, out *MemberUsers) error
		GetGroupById(ctx context.Context, in *proto1.IdQuery, out *Group) error
		PagedListGroups(ctx context.Context, in *proto1.QueryWithPage, out *PagedGroups) error
		ListGroupsUsers(ctx context.Context, in *proto1.IdQuery, out *MemberUsers) error
		GetProductById(ctx context.Context, in *proto1.IdQuery, out *Product) error
		PagedListProducts(ctx context.Context, in *proto1.QueryWithPage, out *PagedProducts) error
		ListProductsUsers(ctx context.Context, in *proto1.IdQuery, out *MemberUsers) error
		ListRolesUsers(ctx context.Context, in *proto1.NameQuery, out *RolesMemberUsers) error
		GetUserById(ctx context.Context, in *proto1.IdQuery, out *User) error
		PagedListUsers(ctx context.Context, in *proto1.QueryWithPage, out *PagedUsers) error
		GetUsersDepartment(ctx context.Context, in *proto1.IdQuery, out *UsersDepartment) error
		ListUsersSameDepartmentUsers(ctx context.Context, in *proto1.IdQuery, out *MemberUsers) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) VerifyToken(ctx context.Context, in *Token, out *emptypb.Empty) error {
	return h.AuthServiceHandler.VerifyToken(ctx, in, out)
}

func (h *authServiceHandler) GetTokenContent(ctx context.Context, in *Token, out *TokenContent) error {
	return h.AuthServiceHandler.GetTokenContent(ctx, in, out)
}

func (h *authServiceHandler) GetDepartmentById(ctx context.Context, in *proto1.IdQuery, out *Department) error {
	return h.AuthServiceHandler.GetDepartmentById(ctx, in, out)
}

func (h *authServiceHandler) ListDepartmentsUsers(ctx context.Context, in *proto1.IdQuery, out *MemberUsers) error {
	return h.AuthServiceHandler.ListDepartmentsUsers(ctx, in, out)
}

func (h *authServiceHandler) ListParentDepartmentUsers(ctx context.Context, in *proto1.IdQuery, out *MemberUsers) error {
	return h.AuthServiceHandler.ListParentDepartmentUsers(ctx, in, out)
}

func (h *authServiceHandler) GetGroupById(ctx context.Context, in *proto1.IdQuery, out *Group) error {
	return h.AuthServiceHandler.GetGroupById(ctx, in, out)
}

func (h *authServiceHandler) PagedListGroups(ctx context.Context, in *proto1.QueryWithPage, out *PagedGroups) error {
	return h.AuthServiceHandler.PagedListGroups(ctx, in, out)
}

func (h *authServiceHandler) ListGroupsUsers(ctx context.Context, in *proto1.IdQuery, out *MemberUsers) error {
	return h.AuthServiceHandler.ListGroupsUsers(ctx, in, out)
}

func (h *authServiceHandler) GetProductById(ctx context.Context, in *proto1.IdQuery, out *Product) error {
	return h.AuthServiceHandler.GetProductById(ctx, in, out)
}

func (h *authServiceHandler) PagedListProducts(ctx context.Context, in *proto1.QueryWithPage, out *PagedProducts) error {
	return h.AuthServiceHandler.PagedListProducts(ctx, in, out)
}

func (h *authServiceHandler) ListProductsUsers(ctx context.Context, in *proto1.IdQuery, out *MemberUsers) error {
	return h.AuthServiceHandler.ListProductsUsers(ctx, in, out)
}

func (h *authServiceHandler) ListRolesUsers(ctx context.Context, in *proto1.NameQuery, out *RolesMemberUsers) error {
	return h.AuthServiceHandler.ListRolesUsers(ctx, in, out)
}

func (h *authServiceHandler) GetUserById(ctx context.Context, in *proto1.IdQuery, out *User) error {
	return h.AuthServiceHandler.GetUserById(ctx, in, out)
}

func (h *authServiceHandler) PagedListUsers(ctx context.Context, in *proto1.QueryWithPage, out *PagedUsers) error {
	return h.AuthServiceHandler.PagedListUsers(ctx, in, out)
}

func (h *authServiceHandler) GetUsersDepartment(ctx context.Context, in *proto1.IdQuery, out *UsersDepartment) error {
	return h.AuthServiceHandler.GetUsersDepartment(ctx, in, out)
}

func (h *authServiceHandler) ListUsersSameDepartmentUsers(ctx context.Context, in *proto1.IdQuery, out *MemberUsers) error {
	return h.AuthServiceHandler.ListUsersSameDepartmentUsers(ctx, in, out)
}
